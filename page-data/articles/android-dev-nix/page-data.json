{"componentChunkName":"component---src-templates-article-template-js","path":"/articles/android-dev-nix","result":{"data":{"markdownRemark":{"html":"<p>Since I am a Web developer, I wanted to build my first Android app using React Native.\nI have a computer on Windows which I use in my everyday life, and a server on Linux NixOS which I use to code.\nThanks to VS Code \"Remote Development\" extension I can code like I'm on this Linux machine from anywhere, including my Windows computer.\nLinux development on one tab, my favorite game in another tab: best of both worlds.</p>\n<p>However this restricts me to using VS Code's remote development for all my code projects which means that I can't use Android Studio.\nWell, I could, but I don't like developping on Windows, I greatly prefer using Nix.</p>\n<p>I was really surprised to find that all the docs and ressources about making an Android app were always using Android Studio.\nSo I decided to come up with a simple guide explaining how to do it without it.</p>\n<p>In my case, I will be using Nix and VS Code.</p>\n<h2>Setting up the development environment with Nix</h2>\n<p>Thanks to Nix, one can create a development environment (shell) from a file.\nCheck it out: <a href=\"https://nixos.org/\">https://nixos.org/</a></p>\n<p>At the root of the project, I create a <code>shell.nix</code> file:</p>\n<pre><code class=\"language-nix\">let\n  pkgs = import &#x3C;nixpkgs> { config.android_sdk.accept_license = true; };\n\n  mainBuildToolsVersion = \"29.0.2\";\n\n  android = pkgs.androidenv.composeAndroidPackages {\n    toolsVersion = \"26.1.1\";\n    platformToolsVersion = \"29.0.6\";\n    buildToolsVersions = [ mainBuildToolsVersion ];\n     = [ \"29\" ];\n  };\nin\npkgs.mkShell {\n  buildInputs = [\n    pkgs.gradle\n    pkgs.jdk\n    android.androidsdk\n  ];\n\n  ANDROID_HOME = \"${android.androidsdk}/libexec/android-sdk\";\n  GRADLE_OPTS = \"-Dorg.gradle.project.android.aapt2FromMavenOverride=${android.androidsdk}/libexec/android-sdk/build-tools/${mainBuildToolsVersion}/aapt2\";\n}\n</code></pre>\n<p>Although this is not a Nix tutorial (refer to <a href=\"https://nixos.org/guides/dev-environment.html\">this</a> instead), let me explain it step by step.</p>\n<p>We define our <code>pkgs</code> variable as usual, but we give it the <code>config.android_sdk.accept_license = true;</code>.\nThis is required in order to use the Android SDK.</p>\n<p>Nixpkgs provides the <code>pkgs.androidenv.composeAndroidPackages</code> function that take a set of properties for your Android SDK environment and returns a set of derivations.\nThe most important one for us is <code>androidsdk</code>.\nYou can read more about it on GiHub: <a href=\"https://github.com/NixOS/nixpkgs/blob/master/doc/languages-frameworks/android.section.md\">nixos/nixpkgs # doc/languages-frameworks/android.section.md</a>.</p>\n<p>Be very careful about the versions you select for <code>toolsVersion</code>, <code>platformToolsVersion</code>, <code>buildToolsVersions</code> and <code>platformVersions</code>.\nThey have to work together, and some weird errors sometime happens because you have not selected those versions so that they are compatible with one each other.</p>\n<p>This <code>androidsdk</code> attribute is added to the <code>buildInputs</code> of <code>mkShell</code> so that we have all the Android libs and tools in our environment.</p>\n<p>This however does not set the <code>ANDROID_HOME</code> environment variable, which we define by hand in <code>mkShell</code>:</p>\n<pre><code class=\"language-nix\">ANDROID_HOME = \"${android.androidsdk}/libexec/android-sdk\";\n</code></pre>\n<p>There was also an AAPT 2 bug in my case.\nThe same as <a href=\"https://github.com/NixOS/nixpkgs/issues/72220\">here</a>.\nThe solution is to set <code>org.gradle.project.android.aapt2FromMavenOverride</code> in <code>GRADLE_OPTS</code> to use a specific binary, the one in our custom Android SDK:</p>\n<pre><code class=\"language-nix\">GRADLE_OPTS = \"-Dorg.gradle.project.android.aapt2FromMavenOverride=${android.androidsdk}/libexec/android-sdk/build-tools/${mainBuildToolsVersion}/aapt2\";\n</code></pre>\n<p>After that, we only need to add <code>jdk</code> and <code>gradle</code> to the <code>buildInputs</code>.</p>\n<p>Open VS Code, use the <a href=\"https://marketplace.visualstudio.com/items?itemName=arrterian.nix-env-selector\">Nix Environment Extension</a>, select <code>shell.nix</code> and reload.</p>\n<p>We are ready to go!</p>\n<h2>Creating the project build configuration</h2>\n<p>We will use Gradle for our builds.</p>\n<p>Let's create our top-level gradle configuration.</p>\n<pre><code class=\"language-gradle\">buildscript {\n    repositories {\n        google()\n        jcenter()\n    }\n    dependencies {\n        classpath 'com.android.tools.build:gradle:3.6.4'\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        jcenter()\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}\n</code></pre>\n<p>This is the basic build configuration you would find by generating your project with Android Studio.\nNote that <code>com.android.tools.build:gradle:3.6.4</code> refers to the Gradle plugin for Android development.</p>\n<blockquote>\n<p>Note: the version specified here will maybe have to be changed in the future. Check <a href=\"https://developer.android.com/studio/releases/gradle-plugin\">the release notes</a>.</p>\n</blockquote>\n<p>If you want to use a Gradle wrapper, you can do</p>\n<pre><code class=\"language-bash\">gradle wrapper\n</code></pre>\n<p>to generate <code>gradlew</code>.</p>\n<blockquote>\n<p>Be sure to be inside the nix-shell before using <code>gradle wrapper</code>.</p>\n</blockquote>\n<p>I would advise to then create a <code>gradle.properties</code> file with the following line:</p>\n<pre><code>android.useAndroidX=true\n</code></pre>\n<p>This will allow you to use AndroidX, with its latest cool features.</p>\n<h2>Creating our app</h2>\n<p>Let's create a folder <code>app</code>.</p>\n<p>We will first create the build configuration of this app.\nLet's make a file called <code>build.gradle</code>:</p>\n<pre><code class=\"language-gradle\">apply plugin: 'com.android.application'\n\nandroid {\n    compileSdkVersion 29\n    buildToolsVersion \"29.0.2\"\n    defaultConfig {\n        applicationId \"com.example.myapplication\"\n        versionCode 1\n        versionName \"1.0\"\n        minSdkVersion 16\n        targetSdkVersion 29\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt')\n        }\n    }\n}\n\ndependencies {\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'\n    implementation 'androidx.appcompat:appcompat:1.2.0'\n}\n</code></pre>\n<p>Let's walk through this file:</p>\n<p>We first apply the android plugin thanks to the first line</p>\n<pre><code class=\"language-gradle\">apply plugin: 'com.android.application'\n</code></pre>\n<p>which allows use to use the <code>android</code> directive:</p>\n<pre><code class=\"language-gradle\">android {\n    compileSdkVersion 29\n    buildToolsVersion \"29.0.2\"\n    defaultConfig {\n        applicationId \"com.example.myapplication\"\n        versionCode 1\n        versionName \"1.0\"\n        minSdkVersion 16\n        targetSdkVersion 29\n    }\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android.txt')\n        }\n    }\n}\n</code></pre>\n<blockquote>\n<p>Note: specified version here will maybe have to be changed in the future. They should match your SDK versions defined in <code>shell.nix</code>.</p>\n</blockquote>\n<p>For the sake of demonstration, I have added some Android dependencies:</p>\n<pre><code class=\"language-gradle\">dependencies {\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'\n    implementation 'androidx.appcompat:appcompat:1.2.0'\n}\n</code></pre>\n<p>Now, onto writing the code of the actual app!</p>\n<p>Create the folder path <code>app/src/main</code></p>\n<p>Let's start with the <code>app/src/main/AndroidManifest.xml</code> file.</p>\n<pre><code class=\"language-xml\">&#x3C;?xml version=\"1.0\" encoding=\"utf-8\"?>\n&#x3C;manifest\n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    package=\"com.example.myapplication\"\n>\n    &#x3C;application android:label=\"Demo App\">\n        &#x3C;activity android:name=\"com.example.myapplication.MainActivity\">\n            &#x3C;intent-filter>\n                &#x3C;action android:name=\"android.intent.action.MAIN\" />\n                &#x3C;category android:name=\"android.intent.category.LAUNCHER\" />\n            &#x3C;/intent-filter>\n        &#x3C;/activity>\n    &#x3C;/application>\n&#x3C;/manifest>\n</code></pre>\n<p>There is not much to say about it.\nIt defines an application, \"Demo App\", with one activity named <code>com.example.myapplication.MainActivity</code>.</p>\n<p>This is a very simple empty app.</p>\n<p>Now, we need some Java code.</p>\n<p>Create in <code>app/src/main/java</code> the path corresponding to the package path, here <code>app/src/main/com/example/myapplication</code>.\nIn that folder, create <code>MainActivity.java</code>:</p>\n<pre><code class=\"language-java\">package com.example.myapplication;\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\npublic class MainActivity extends Activity {\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n    }\n}\n</code></pre>\n<p>The package path matches the folder path after <code>app/src/main/java</code>.\nThe class name matches our Android manifest and extends <code>android.app.Activity</code>.\nThe method inside it does not much, it just uses the super constructor.</p>\n<h2>Building our app</h2>\n<p>Open a terminal, go to the root folder of the project and get to a nix shell:</p>\n<pre><code class=\"language-bash\">nix-shell\n</code></pre>\n<p>Then build it using Gradle</p>\n<pre><code>gradle build\n</code></pre>\n<p>It should build without errors.</p>\n<blockquote>\n<p>If you get any errors, please create an issue <a href=\"https://github.com/GuillaumeDesforges/nix-android-template/issues\">here</a>.</p>\n</blockquote>\n<h2>Launching / debugging</h2>\n<p>Now's the interesting part.\nI want to debug my app using the VS Code <a href=\"https://marketplace.visualstudio.com/items?itemName=adelphes.android-dev-ext\">Android debug extension</a> that runs on my development server with Nix, but I want to run an emulator on my desktop computer (on Windows).</p>\n<p>It's simple enough to do: start your Android emulator.\nI use Android Studio's AVD Manager, accessible from the Android Studio start window, <code>Configure</code> -> <code>AVD Manager</code>.\nAfter starting an emulator, you can close the AVD Manager window.</p>\n<p>I now use SSH port forwarding to forward the emulator.\nFrom my desktop (running the emulator) I launch:</p>\n<pre><code class=\"language-bash\">ssh -vNR 5554:localhost:5554 -R 5555:localhost:5555 devserver\n</code></pre>\n<p>where <code>devserver</code> is an SSH configuration to connect to my Linux machine.</p>\n<p>You need an Android launch config in VS Code, see my <code>.vscode/launch.json</code>:</p>\n<pre><code class=\"language-json\">{\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"type\": \"android\",\n            \"request\": \"launch\",\n            \"name\": \"Android launch\",\n            \"appSrcRoot\": \"${workspaceRoot}/app/src/main\",\n            \"apkFile\": \"${workspaceRoot}/app/build/outputs/apk/debug/app-debug.apk\",\n            \"adbPort\": 5037,\n            \"targetDevice\": \"${command:PickAndroidDevice}\"\n        }\n    ]\n}\n</code></pre>\n<p>Then start this <code>Android launch</code> configuration.</p>\n<p><img src=\"/imgs/android-dev-nix/itworks.png\" alt=\"It works (screenshot)\"></p>\n<h2>Conclusion</h2>\n<p>You can find the source code of the project here: <a href=\"https://github.com/GuillaumeDesforges/nix-android-template\">https://github.com/GuillaumeDesforges/nix-android-template</a></p>\n<p>If you have difficulties, you can post a new <a href=\"https://github.com/GuillaumeDesforges/nix-android-template/issues/new\">issue</a>.</p>\n<p>I really love Nix because it simplifies my development experience.\nWhile I may struggle sometimes trying to get my very first environment for a project in an ecosystem I don't know yet, once it is done it is done <em>forever</em>.</p>\n<p>Debugging all the build errors I had was no fun, so I hope this blog post will be useful for others.</p>\n<p>Cheers!</p>","frontmatter":{"date":"29-11-2020","path":"/articles/android-dev-nix","title":"Building my first Android app without Android Studio","abstract":"VS Code (Remote SSH), Nix, Gradle instead","tags":"software engineering, mobile development, android, vs code, nix"}},"site":{"siteMetadata":{"siteUrl":"https://guillaumedesforges.github.io"}}},"pageContext":{}}}
{"componentChunkName":"component---src-templates-article-template-js","path":"/articles/nix-love-and-hate","result":{"data":{"markdownRemark":{"html":"<p>When I was working at Capgemini Invent IDE as a Data Scientist, I came across a dev (they were doing code quality consulting on DS projects) with whom I really enjoyed talking to on coffee breaks. Once, he told me about his OS, which was something amazing and worked flawlessly. He told me the name: \"NixOS\". I quickly looked into it and for some time never really looked at it again.</p>\n<p>Somehow, my Manjaro dual boot had some issues and I had to wipe my laptop (like I always do when Linux f**ks my computers). As I was pulling my bootable USB key to install Manjaro again, I told myself: \"man, it's time to do it\", and I installed NixOS.</p>\n<h2>The good</h2>\n<p>When installing NixOS, you feel even more like a hacker than when installing Manjaro with Manjaro Architect (not even talking about Ubuntu's fancy UI). You have to do quite the same steps, but you do it on the command line. No fancy terminal GUI-like things to help you. It's just you, the command line and the NixOS manual.</p>\n<p>I really only had a few struggles, moslty with the Nix syntax since I was a beginner, but in the end the installation was pretty straightforward. You boot on the USB key, you make the partitions and format them, you mount your partitions, you use a command to create the basic configuration. Now, the fun part: you make the configuration, not with a fancy GUI like usual: you make it by writing the <code>/etc/nixos/configuration.nix</code> file. You enable your options, you create your users (with their hashed passwords), you list the basic programs that you want, you select the desktop environment... after digging into the manual, you realize there are already quite a number of things that you can specify. I really loved the fact that I could navigate into the configuration as I would like, not restrained by the \"Next\" buttons that seem so permanent (when pressing the \"Previous\" button made your laptop work for ages... <em>ugh</em>). Once you've written all your configuration, and provided you are connected to the internet (I've learned how <code>wpa_supplicant</code> and <code>ip</code> are NOT fun), you type <code>nixos-install</code> and here goes your machine working like crazy, fetching all the packages and installing all the environment.</p>\n<p>Once it's done, just reboot and <em>tadaa</em> you have installed NixOS. Congrats!</p>\n<p>I've had some difficulties setting things up, but once you've figured out a few things like Nix (a functional language), how the package manager works and all, it is awesome to use. And whenever you want to change your OS configuration, no need to set it up from scratch again: just change <code>/etc/nixos/configuration.nix</code> and run <code>nixos-rebuild switch</code> (and reboot). This felt so awesome.</p>\n<p>With Nix, using different environments with different packages versions is a bliss. You can write a Nix expression specifying the desired environment, packages and all, and load a <em>pure</em> environment from it with <code>nix-shell</code>. All your workflows become reproducible! Combined with <code>home-manager</code>, your whole setup is specified by files that you can commit on a Git repo. You can <em>track your computer configuration</em>!</p>\n<p>However, this was all too perfect, there had to be some issues.</p>\n<h2>The bad</h2>\n<p>My most annoying struggles all revolve around a single issue: Nix is too strict. In order to be this powerful, it has to be strict, I need it to be strict, but sometimes I really just want to test things, do things quick and dirty. I really want to. Thankfully, Nix does not allow me to do things quick and dirty, but this gets annoying.</p>\n<p>For instance, in order to install from PyPi Python packages that are not available on nixpkgs, you need to write overlays on the nixpkgs Python environment, basically adding yourself the PyPi packages to the Nix package manager locally. This sometimes needs writing overlays for the dependencies as well, and so on, and there can be <em>a lot</em>.</p>\n<p>Sometimes I miss the good old plain <code>virtualenv</code>. I think it can be used on NixOS, but I could not make it work simply, so writing overlays became easier.</p>\n<p>There is another big issue that is being <a href=\"https://discourse.nixos.org/t/improving-nixos-data-science-infrastructure-ci-for-mkl-cuda/5074\">discussed on NixOS' Discourse</a>. Whenever you are doing Data Sciences, it would be hard not to use Pytorch or Tensorflow, and whenever you do you want to use CUDA. Due to technical issues with the licenses and compilation, the Nix package manager cache server \"Hydra\" does not build Pytorch and Tensorflow with GPU capabilities...</p>\n<p>A nice person has done the good deed of making a <a href=\"https://github.com/stites/pytorch-world\">Cachix server for Pytorch CUDA builds</a> (much love to <a href=\"https://github.com/stites\">@stites</a>).</p>\n<p>Basically, NixOS still does not feel right for Data Scientists, making it too hard to do things quickly when it is not already setup.</p>\n<p>However, the Haskell community is doing a very good job on nixpkgs. Developping in Haskell with Nix is awesome, and I can only advise you to give it a look.</p>\n<h2>Thoughts</h2>\n<p>While NixOS is really useful and makes a great step towards how an OS and a package manager should feel like, there is still some work to be done to make it usable for non DevOps people. In order to enjoy it, you have to understand (and be bothered) by issues on other operating systems and package managers. Basically, <strong>to enjoy Nix you have to hate states</strong>. But when you do, it feels like NixOS is worth the time, even though it is so time-consuming.</p>\n<p>I would not advise people to use NixOS right now, however if you're a techy person you should definitly give it a shot. Those amazing tools just need more people to work on it. I think this kind of OS and package manager have a bright future ahead. In the end, it may not turn out to be NixOS that really gains popularity, but NixOS will definitly be a milestone.</p>\n<p>I look forward seeing more good ideas from those amazing people !</p>","frontmatter":{"date":"14-12-2019","path":"/articles/nix-love-and-hate","title":"Nix: a story of love and hate","abstract":"I love Nix but sometimes you can only hate it.","tags":"os, dev"}},"site":{"siteMetadata":{"siteUrl":"https://guillaumedesforges.github.io"}}},"pageContext":{}}}